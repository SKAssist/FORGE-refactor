# test_simple.py
import os
import re
import requests
import difflib
from pathlib import Path
from refactor_verification import (
    CrossHairVerifier, Z3Verifier, PythonToZ3Translator,
    ASTAnalyzer, extract_code_block, get_function_from_code, RefactoringEngine
)
from mistralai import Mistral

# Mistral setup
api_key = "shZl9BS91mQ08w7NX4FpGlifFyiMH5fj"
model = "mistral-large-latest"
client = Mistral(api_key=api_key)

def call_mistral(prompt):
    chat_response = client.chat.complete(
        model=model,
        messages=[{"role": "user", "content": prompt}],
    )
    return chat_response.choices[0].message.content

def call_llama(prompt: str) -> str:
    payload = {
        "model": MODEL_NAME,
        "prompt": prompt,
        "stream": False
    }
    try:
        res = requests.post(OLLAMA_URL, json=payload)
        res.raise_for_status()
        return res.json()["response"].strip()
    except Exception as e:
        print(f"‚ùå Error calling LLaMA: {e}")
        return ""

def strip_fences(text: str) -> str:
    return text.strip()

def refactor_seed(seed_code: str) -> str:
    prompt = f"""Refactor the following Python function to improve clarity, structure, and maintainability.

- Break the function into smaller, well-named helper functions that each handle one concern (e.g., validation, filtering, transformation, or output)
- Eliminate redundancy and simplify logic
- Improve variable and function names
- Preserve all functionality
- Do not include explanations or comments‚Äîjust return the refactored code

Code:
{seed_code}
"""
    return strip_fences(call_llama(prompt))

def refactor_call_context(seed_before: str, seed_after: str, usage_block: str) -> str:
    prompt = f"""You are refactoring the following block of code that calls a function which was just refactored.

Here is the original function before the change:
{seed_before}

Here is the refactored version of the function:
{seed_after}

Now update the following block of code so it uses the new function correctly.

‚ö†Ô∏è IMPORTANT:
- The refactored function now performs its own input validation and filtering.
- Do NOT duplicate that logic in the callsite.
- Adjust the function name and arguments as needed.
- Preserve the original intent and functionality.

Block:
{usage_block}

Return only the updated code, with no explanation.
"""
    return strip_fences(call_llama(prompt))

def refactor_with_engine(original_code):
    refactor_engine = RefactoringEngine()
    results = refactor_engine.refactor_with_feedback_loop(
        original_code=original_code,
        refactoring_strategy="optimize_for_readability",
        max_iterations=3
    )
    return results["final_refactored_code"]

def extract_function_name(code: str) -> str:
    match = re.search(r'def\s+(\w+)\s*\(', code)
    return match.group(1) if match else None

def find_function_usage_blocks(code: str, func_name: str, context_window: int = 1):
    lines = code.splitlines()
    pattern = re.compile(rf'\b{func_name}\s*\(.*?\)')
    blocks = []

    for i, line in enumerate(lines):
        if pattern.search(line):
            start = max(i - context_window, 0)
            end = min(i + context_window + 1, len(lines))
            snippet = "\n".join(lines[start:end]).strip()
            blocks.append((snippet, start, end))

    return blocks

def replace_blocks(content: str, new_blocks: list, positions: list) -> str:
    lines = content.splitlines()
    for (start, end), new_block in zip(positions, new_blocks):
        lines[start:end] = new_block.strip().splitlines()
    return "\n".join(lines)

def print_diff(old: str, new: str, filename: str):
    diff = difflib.unified_diff(
        old.splitlines(),
        new.splitlines(),
        fromfile=f'{filename} (before)',
        tofile=f'{filename} (after)',
        lineterm=''
    )
    print("\n".join(diff))

def process_files(func_name: str, seed_before: str, seed_after: str, target_dir: str):
    changed_files = 0
    for root, _, files in os.walk(target_dir):
        for file in files:
            if Path(file).suffix != ".py":
                continue

            path = os.path.join(root, file)
            with open(path, 'r') as f:
                content = f.read()

            blocks_with_pos = find_function_usage_blocks(content, func_name)
            if not blocks_with_pos:
                continue

            new_blocks = []
            positions = []

            for block, start, end in blocks_with_pos:
                refactored = refactor_call_context(seed_before, seed_after, block)
                if refactored.strip() != block.strip():
                    print(f"\nüîß Refactored block in {file}:")
                    print_diff(block, refactored, file)
                    new_blocks.append(refactored)
                    positions.append((start, end))
                else:
                    new_blocks.append(block)
                    positions.append((start, end))

            new_content = replace_blocks(content, new_blocks, positions)
            if new_content != content:
                with open(path, 'w') as f:
                    f.write(new_content)
                changed_files += 1

    print(f"\n‚úÖ Done. Refactored {changed_files} file(s).")

# üéØ THIS is the function to call from VS Code
def refactor(seed_code: str, target_directory: str):
    if not seed_code.strip():
        print("‚ùå No seed code provided.")
        return

    print("üì§ Sending seed snippet to Mistral...")
    seed_after = refactor_with_engine(seed_code)

    if not seed_after:
        print("‚ùå Refactor failed.")
        return

    print("‚úÖ Refactor received.")
    func_name = extract_function_name(seed_code)
    if not func_name:
        print("‚ùå Could not determine function name.")
        return

    print(f"üîç Refactoring usages of `{func_name}` in {target_directory}")
    process_files(func_name, seed_code, seed_after, target_directory)

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 3:
        print("Usage: python3 test_simple.py <seed_code_file> <target_directory>")
        sys.exit(1)

    seed_path = sys.argv[1]
    target_dir = sys.argv[2]

    if not os.path.exists(seed_path):
        print(f"‚ùå File not found: {seed_path}")
        sys.exit(1)

    with open(seed_path, 'r') as f:
        seed_code = f.read()

    refactor(seed_code, target_dir)
